<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Cistern</title>
    <link>https://cistern.github.io/index.xml</link>
    <description>Recent content on Cistern</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <atom:link href="https://cistern.github.io/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Docs</title>
      <link>https://cistern.github.io/docs/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://cistern.github.io/docs/</guid>
      <description>

&lt;h2 id=&#34;overview&#34;&gt;Overview&lt;/h2&gt;

&lt;p&gt;Cistern is an event aggregation and indexing system. Cistern consumes VPC Flow Logs and JSON events
from AWS CloudWatch Logs and exposes a SQL-like querying interface.&lt;/p&gt;

&lt;h2 id=&#34;getting-started&#34;&gt;Getting Started&lt;/h2&gt;

&lt;p&gt;First, download a release from &lt;a href=&#34;https://github.com/Cistern/cistern/releases&#34;&gt;GitHub&lt;/a&gt;.
Cistern has no external dependencies and is a single binary.&lt;/p&gt;

&lt;p&gt;Cistern accepts a few command-line flags.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;api-addr&lt;/strong&gt;: Listen address for the UI and API (defaults to &lt;code&gt;localhost:2020&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;config&lt;/strong&gt;: Path to the config file (defaults to &lt;code&gt;./cistern.json&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;data-dir&lt;/strong&gt;: Data directory where Cistern saves data (defaults to &lt;code&gt;./data/&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;ui-content&lt;/strong&gt;: Path to static UI content (enables UI)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;You&amp;rsquo;ll have to create a config file in order to let Cistern know which CloudWatch log groups
to consume from.&lt;/p&gt;

&lt;h4 id=&#34;config-file&#34;&gt;Config file&lt;/h4&gt;

&lt;p&gt;The config file has two main options:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;cloudwatch_logs&lt;/strong&gt;: A list of CloudWatch Logs log groups to consume.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;retention&lt;/strong&gt;: The retention of events in days.&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{
  &amp;quot;cloudwatch_logs&amp;quot;: [],
  &amp;quot;retention&amp;quot;: 3
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You can specify the log groups to consume in the config file.
In the &lt;code&gt;cloudwatch_logs&lt;/code&gt; section, add an object for each log group
with the name and whether it&amp;rsquo;s a flow log group.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Example&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{
  &amp;quot;cloudwatch_logs&amp;quot;: [
    {
      &amp;quot;name&amp;quot;: &amp;quot;flowlogs&amp;quot;,
      &amp;quot;flowlog&amp;quot;: true
    },
    {
      &amp;quot;name&amp;quot;: &amp;quot;applogs&amp;quot;,
      &amp;quot;flowlog&amp;quot;: false
    }
  ],
  &amp;quot;retention&amp;quot;: 3
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;credentials&#34;&gt;Credentials&lt;/h4&gt;

&lt;p&gt;Cistern will try to use AWS credentials from the following locations:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Environment variables (AWS_ACCESS_KEY_ID, AWS_SECRET_ACCESS_KEY)&lt;/li&gt;
&lt;li&gt;Shared credentials file (~/.aws/credentials)&lt;/li&gt;
&lt;li&gt;EC2 Instance Role credentials&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;To specify the region, set the AWS_REGION environment variable.&lt;/p&gt;

&lt;h2 id=&#34;using-cistern&#34;&gt;Using Cistern&lt;/h2&gt;

&lt;h3 id=&#34;ui&#34;&gt;UI&lt;/h3&gt;

&lt;p&gt;Cistern comes with a simple UI to query events. It&amp;rsquo;s accessible at
&lt;code&gt;http://api-addr/ui/&lt;/code&gt;, where api-addr is the value of the command-line flag.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;UI Screenshot:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#39;https://cistern.github.io/img/screenshot1.png&#39; alt=&#39;screenshot&#39; width=400/&gt;&lt;/p&gt;

&lt;h4 id=&#34;query-language&#34;&gt;Query Language&lt;/h4&gt;

&lt;p&gt;Cistern uses a SQL-like query language. Here&amp;rsquo;s an example:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-txt&#34;&gt;SELECT sum(bytes), sum(packets)
GROUP BY source_address, dest_address
FILTER source_address neq &amp;quot;10.0.0.1&amp;quot;
ORDER BY sum(bytes) DESC
LIMIT 5
POINT SIZE 1h
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You&amp;rsquo;ll notice that FILTER and POINT SIZE are keywords that aren&amp;rsquo;t from SQL.&lt;/p&gt;

&lt;p&gt;The main components of that query are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;SELECT&lt;/li&gt;
&lt;li&gt;GROUP BY&lt;/li&gt;
&lt;li&gt;FILTER&lt;/li&gt;
&lt;li&gt;ORDER BY&lt;/li&gt;
&lt;li&gt;LIMIT&lt;/li&gt;
&lt;li&gt;POINT SIZE&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;These six components &lt;em&gt;must&lt;/em&gt; be in that order. All components are optional.
The following sections of the documentation describe how the results change
depending on which components are present.&lt;/p&gt;

&lt;h4 id=&#34;events&#34;&gt;Events&lt;/h4&gt;

&lt;p&gt;Raw events are returned if &lt;em&gt;only&lt;/em&gt; FILTER and LIMIT are defined.&lt;/p&gt;

&lt;h4 id=&#34;aggregations&#34;&gt;Aggregations&lt;/h4&gt;

&lt;p&gt;Aggregations are returned when there are aggregation columns defined with
SELECT.&lt;/p&gt;

&lt;h4 id=&#34;time-series&#34;&gt;Time Series&lt;/h4&gt;

&lt;p&gt;Time series are returned when the POINT SIZE is defined. The argument passed
to POINT SIZE is a decimal number with a unit suffix. Valid time units are
&lt;code&gt;ns&lt;/code&gt;, &lt;code&gt;us&lt;/code&gt; (or &lt;code&gt;Âµs&lt;/code&gt;), &lt;code&gt;ms&lt;/code&gt;, &lt;code&gt;s&lt;/code&gt;, &lt;code&gt;m&lt;/code&gt;, &lt;code&gt;h&lt;/code&gt;. If you need to set a point size
of 1 day, use &lt;code&gt;24h&lt;/code&gt;.&lt;/p&gt;

&lt;h4 id=&#34;filters&#34;&gt;Filters&lt;/h4&gt;

&lt;p&gt;Filters are applied as the first stage of query execution. A filter requires
a column name, a condition, and a value for the condition. The supported
conditions are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;eq&lt;/strong&gt;: equal&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;neq&lt;/strong&gt;: not equal&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If multiple filters are specified, they are applied in a boolean &amp;ldquo;AND&amp;rdquo; operation.&lt;/p&gt;

&lt;h3 id=&#34;retention&#34;&gt;Retention&lt;/h3&gt;

&lt;p&gt;Cistern doesn&amp;rsquo;t enforce retention automatically. You&amp;rsquo;ll have to do it manually
by sending a POST request to the &lt;code&gt;/api/collections/:collection/compact&lt;/code&gt; endpoint.
This will rewrite the collection and remove expired events.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Index</title>
      <link>https://cistern.github.io/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://cistern.github.io/</guid>
      <description>&lt;div class=&#34;row&#34;&gt;
  &lt;div class=&#34;col-sm-4&#34;&gt;
    &lt;h3&gt;Features&lt;/h3&gt;
    &lt;ul&gt;
      &lt;li&gt;Open source&lt;/li&gt;
      &lt;li&gt;SQL-like query language&lt;/li&gt;
      &lt;li&gt;Zero dependencies&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/div&gt;
  &lt;div class=&#34;col-sm-4&#34;&gt;
    &lt;h3&gt;Open source&lt;/h3&gt;
    &lt;ul&gt;
      &lt;li&gt;Available on &lt;a href=&#34;https://github.com/Cistern/cistern&#34;&gt;GitHub&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;Written in Go&lt;/li&gt;
      &lt;li&gt;MIT licensed&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/div&gt;
  &lt;div class=&#34;col-sm-4&#34;&gt;
    &lt;h3&gt;Getting started&lt;/h3&gt;
    &lt;p&gt;Grab a release from &lt;a href=&#34;https://github.com/Cistern/cistern/releases&#34;&gt;GitHub&lt;/a&gt;
    and check out the &lt;a href=&#34;https://cistern.github.io/docs/#getting-started&#34;&gt;Getting Started&lt;/a&gt; section of the docs!
    &lt;/p&gt;
  &lt;/div&gt;
&lt;/div&gt;
</description>
    </item>
    
  </channel>
</rss>